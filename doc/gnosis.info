This is gnosis.info, produced by .texi2any-real version 7.1 from
gnosis.texi.

INFO-DIR-SECTION Emacs misc features
START-INFO-DIR-ENTRY
* Gnosis (γνῶσις): (gnosis). Spaced Repetition System For Note Taking & Self-Testing.
END-INFO-DIR-ENTRY


File: gnosis.info,  Node: Top,  Next: Introduction,  Up: (dir)

Gnosis User Manual
******************

Gnosis is a customizable spaced repetition system designed to enhance
memory retention through active recall.  It allows users to set specific
review intervals for note decks & tags, creating an optimal learning
environment tailored to each specific topic.

This manual is written for Gnosis version 0.4.0, released on 2024-08-7.

   • Official manual: <https://thanosapollo.org/user-manual/gnosis>
   • Git repositories:
        • <https://git.thanosapollo.org/gnosis>

* Menu:

* Introduction::
* Adding notes::
* Note Types::
* Customization::
* Gnosis Algorithm::
* Editing notes::
* Sync between devices::
* Configuring Note Types::

-- The Detailed Node Listing --

Note Types

* Cloze::
* MC-Cloze (Under development)::
* MCQ::
* Basic Type::
* Double::
* y-or-n::

Customization

* Image size::
* Typos | String Comparison::

Gnosis Algorithm

* Anagnosis Event::
* Proto::

Configuring Note Types

* Adjust Current Types Entries::
* Creating Custom Note Types::
* Development::



File: gnosis.info,  Node: Introduction,  Next: Adding notes,  Prev: Top,  Up: Top

1 Introduction
**************

Gnosis (γνῶσις) is a spaced repetition system that enhances memory
retention through active recall.  It employs a Q&A format, where each
note consists of a question, answer, and explanation.  Notes are
reviewed at optimally spaced intervals based on the user's success or
failure to recall the answer.  Key benefits arise from writing out
answers when reviewing notes, fostering deeper understanding and
improved memory retention.

   Gnosis algorithm is highly adjustable, allowing users to set specific
values not just for note decks but for tags as well.  Gnosis'
adjustability allows users to fine-tune settings not only for entire
note collections but also for specific tagged topics, thereby creating a
personalized learning environment for each topic.  Read more on *note
Gnosis Algorithm::

   Before continuing reading this manual, it's recommended you try out
‘gnosis-demo’.


File: gnosis.info,  Node: Adding notes,  Next: Note Types,  Prev: Introduction,  Up: Top

2 Adding notes
**************

Creating notes for gnosis can be done interactively with:

   ‘M-x gnosis-add-note’

   Or from within ‘gnosis-dashboard’

   When it comes to adding images, you can select images that are inside
‘gnosis-images-dir’.  For adjusting image size, refer to *note
Customization::


File: gnosis.info,  Node: Note Types,  Next: Customization,  Prev: Adding notes,  Up: Top

3 Note Types
************

* Menu:

* Cloze::
* MC-Cloze (Under development)::
* MCQ::
* Basic Type::
* Double::
* y-or-n::


File: gnosis.info,  Node: Cloze,  Next: MC-Cloze (Under development),  Up: Note Types

3.1 Cloze
=========

A cloze note type is a format where you create sentences or paragraphs
with "missing" words.  A fill-in-the-blanks question.

   You can create a cloze note type using ‘M-x gnosis-add-note’ and
selecting ‘Cloze’, the question should be formatted like this:

     {c1:Cyproheptadine::drug name} is a(n) {c2:5-HT2} receptor
     antagonist used to treat {c2:serotonin syndrome}

   You can also format clozes like Anki if you so prefer; e.g
‘{{c1::Cyproheptadine::drug name}}’

   • For each cX-tag there will be created a cloze type note, the above
     example creates 2 cloze type notes.

   • Each cX tag can have multiple clozes, but each cloze must be a
     *UNIQUE* word, or a unique combination of words, in given note.

        • If a cloze is repeated, such as in phrases with "acetyl" &
          acetylcholine, include whitespace in the cloze to denote a
          single word.

   • You can use the keyword ‘::’ to indicate a hint.

   You can remove the _guidance_ string by adjusting
‘gnosis-cloze-guidance’.


File: gnosis.info,  Node: MC-Cloze (Under development),  Next: MCQ,  Prev: Cloze,  Up: Note Types

3.2 MC-Cloze (Under development)
================================

MC-Cloze is disabled by default, to enable it add to your configuration:

   ‘(add-to-list 'gnosis-note-types "MC-Cloze")’

   A MC-Cloze (_Multiple Choice Cloze_) is a fill-in-the-blank note, but
unlike *note cloze note type: Cloze. the user is prompted to select an
option instead of typing an answer.

   You can create multiple notes from one input, but each note can only
have *one* cloze.  The first option will always be the right answer
(will be randomized in the database), separated by the rest of the
answer by ‘gnosis-mc-cloze-separator’ (default value is "&&"), and a
note will be generated from each cloze.

   Example:
     The greatest text editor is Emacs&&Vim&&Helix

   When customizing ‘gnosis-mc-cloze=separator’ pay attention to not use
values that would mess up with regex functions.


File: gnosis.info,  Node: MCQ,  Next: Basic Type,  Prev: MC-Cloze (Under development),  Up: Note Types

3.3 MCQ
=======

A MCQ note type, as the name suggests, is a multiple choice question.

   The stem field (question) is separated by the options (choices) via
‘gnosis-mcq-separator’, each option is separated by
‘gnosis-mcq-option-separator’.

   You can remove the _guidance_ string by adjusting
‘gnosis-mcq-guidance’.


File: gnosis.info,  Node: Basic Type,  Next: Double,  Prev: MCQ,  Up: Note Types

3.4 Basic Type
==============

Basic note type is a simple question/answer note, where the user first
sees a "main" part, which is usually a question, and he is prompted to
input the answer.


File: gnosis.info,  Node: Double,  Next: y-or-n,  Prev: Basic Type,  Up: Note Types

3.5 Double
==========

Double note type, is essentially a note that generates 2 basic notes.
The second one reverses question/answer.

   Ideal for vocabulary acquisition notes.


File: gnosis.info,  Node: y-or-n,  Prev: Double,  Up: Note Types

3.6 y-or-n
==========

y-or-n (yes or no) note type, user is presented with a question and
prompted to enter character "y" or "n".

   When using the hidden function ‘gnosis-add-note--y-or-n’, note that
the ANSWER must be either 121 (‘y’) or 110 (‘n’), as those correspond to
the character values used to represent them.


File: gnosis.info,  Node: Customization,  Next: Gnosis Algorithm,  Prev: Note Types,  Up: Top

4 Customization
***************

* Menu:

* Image size::
* Typos | String Comparison::


File: gnosis.info,  Node: Image size,  Next: Typos | String Comparison,  Up: Customization

4.1 Image size
==============

Adjust image size using ‘gnosis-image-height’ & ‘gnosis-image-width’

   Example:
     (setf gnosis-image-height 300
           gnosis-image-width 300)


File: gnosis.info,  Node: Typos | String Comparison,  Prev: Image size,  Up: Customization

4.2 Typos | String Comparison
=============================

You can adjust ‘gnosis-string-difference’, this is a threshold value for
string comparison that determines the maximum acceptable Levenshtein
distance between two strings, which identifies their similarity

   Let's illustrate with an example:
     (setf gnosis-string-difference 1)

   In this scenario, we set ‘gnosis-string-difference’ to 1.  This
implies that two strings will be recognized as similar if they exhibit a
difference of at most one character edit.

   To demonstrate, 'example' and 'examples' will be recognized as
similar, considering that the latter involves just one additional
character."


File: gnosis.info,  Node: Gnosis Algorithm,  Next: Editing notes,  Prev: Customization,  Up: Top

5 Gnosis Algorithm
******************

Each gnosis note has a gnosis score, which is a list of 3 values,
(gnosis-plus gnosis-minus gnosis-synolon/total).  Gnosis-synolon is what
is used to determine the next interval upon a successful recall,
gnosis-plus is added to gnosis-synolon upon a successful recall as well,
gnosis-minus is subtracted from gnosis-synolon upon failing to recall a
note's answer.

   Gnosis has 2 special events, one is ‘anagnosis’ _ανάγνωση_ and
‘lethe’ _λήθη_.

* Menu:

* Anagnosis Event::
* Proto::


File: gnosis.info,  Node: Anagnosis Event,  Next: Proto,  Up: Gnosis Algorithm

5.1 Anagnosis Event
===================

‘Anagnosis’, which means comprehension & recognition of knowledge, is
triggered when the consecutive successful or failed recalls are equal or
greater to anagnosis value.

   When ‘anagnosis’ is triggered by consecutive *successful* recalls,
‘epignosis’ value is added to gnosis-plus.  _Epignosis means accuracy of
knowledge_.

   When ‘anagnosis’ is triggered by consecutive *failed* recalls,
‘agnoia’ value is added to gnosis-minus.  _Agnoia means lack of
knowledge_

   You can set specific values for each deck and tag of the variables
mentioned above by adjusting ‘gnosis-custom-values’.


File: gnosis.info,  Node: Proto,  Prev: Anagnosis Event,  Up: Gnosis Algorithm

5.2 Proto
=========

The default initial interval is defined at ‘gnosis-algorithm-proto’, you
can define a custom initial interval for each deck as well.

   ‘gnosis-algorithm-interval’ is a list of numbers, representing the
first initial intervals for successful reviews.  There is no limit on
the length of the list.

   Example:

     (setq gnosis-algorithm-interval '(0 1 2 30))

   Upon each successful note review, the algorithm will increment to the
next interval value: 0 days (0), 1 day later (1), 2 days later (2), and
30 days later.

   Upon failing to review a note without completing it's proto
successful reviews, it's next review date will be on the same date.


File: gnosis.info,  Node: Editing notes,  Next: Sync between devices,  Prev: Gnosis Algorithm,  Up: Top

6 Editing notes
***************

   • Currently there are 2 ways for editing notes:

        • You can edit a note after review by pressing ‘e’
        • Open ‘gnosis-dashboard’ with ‘M-x gnosis-dashboard’, find the
          note you want to edit and press ‘e’


File: gnosis.info,  Node: Sync between devices,  Next: Configuring Note Types,  Prev: Editing notes,  Up: Top

7 Sync between devices
**********************

Gnosis uses git to maintain data integrity and facilitate
synchronization across devices.

   You will need to configure your remote manually.

   Example:

     cd ~/.emacs.d/gnosis # default location for gnosis
     git init # After completing your first review session, a git repo should have been initialized automatically.
     git remote add origin <remote_url>
     git push --set-upstream origin master

   You can interactively use ‘gnosis-vc-push’ & ‘gnosis-vc-pull’.  As
the name suggests, they rely on ‘vc’ to work properly.

   Depending on your setup, ‘vc’ might require an external package for
the ssh passphrase dialog, such as ‘x11-ssh-askpass’.

   To automatically push changes after a review session, add this to
your configuration:
     (setf gnosis-vc-auto-push t)
     (gnosis-vc-pull) ;; Run vc-pull for gnosis on startup


File: gnosis.info,  Node: Configuring Note Types,  Prev: Sync between devices,  Up: Top

8 Configuring Note Types
************************

* Menu:

* Adjust Current Types Entries::
* Creating Custom Note Types::
* Development::


File: gnosis.info,  Node: Adjust Current Types Entries,  Next: Creating Custom Note Types,  Up: Configuring Note Types

8.1 Adjust Current Types Entries
================================

Each gnosis note type has an _interactive_ function, named
‘gnosis-add-note-TYPE’.  You can set default values for each entry by
hard coding specific values to their keywords.

   For example:

     (defun gnosis-add-note-basic (deck)
       (gnosis-add-note--basic :deck deck
                               :question (gnosis-read-string-from-buffer "Question: " "")
                               :answer (read-string "Answer: ")
                               :hint (gnosis-hint-prompt gnosis-previous-note-hint)
                               :extra ""
                               :images nil
                               :tags (gnosis-prompt-tags--split gnosis-previous-note-tags)))

   By evaluating the above code snippet, you won't be prompted to enter
anything for ‘extra’ & ‘images’.


File: gnosis.info,  Node: Creating Custom Note Types,  Next: Development,  Prev: Adjust Current Types Entries,  Up: Configuring Note Types

8.2 Creating Custom Note Types
==============================

Creating custom note types for gnosis is a fairly simple thing to do

   • First add your NEW-TYPE to ‘gnosis-note-types’

          (add-to-list 'gnosis-note-types "NEW-TYPE")
   • Create an interactive function

   Each note type has a ‘gnosis-add-note-TYPE’ that is used
interactively & a "hidden function" ‘gnosis-add-note--TYPE’ that handles
all the logic.  You can use one of the ‘current gnosis-add-note--TYPE’
functions or create one of your own.

   Refer to ‘gnosis-add-note-basic’ & ‘gnosis-add-note--basic’ for a
simple example of how this is done, as well as ‘gnosis-add-note-double’.


File: gnosis.info,  Node: Development,  Prev: Creating Custom Note Types,  Up: Configuring Note Types

8.3 Development
===============

To make development and customization easier, gnosis comes with
‘gnosis-test’ module, that should be used to create a custom database
for testing.

   To exit the testing environment, rerun ‘M-x gnosis-test-start’ and
then enter ‘n’ (no) at the prompt "Start development env?"



Tag Table:
Node: Top250
Node: Introduction1350
Node: Adding notes2363
Node: Note Types2774
Node: Cloze2992
Node: MC-Cloze (Under development)4154
Node: MCQ5142
Node: Basic Type5580
Node: Double5856
Node: y-or-n6122
Node: Customization6524
Node: Image size6709
Node: Typos | String Comparison6995
Node: Gnosis Algorithm7770
Node: Anagnosis Event8417
Node: Proto9158
Node: Editing notes9925
Node: Sync between devices10317
Node: Configuring Note Types11344
Node: Adjust Current Types Entries11576
Node: Creating Custom Note Types12576
Node: Development13412

End Tag Table


Local Variables:
coding: utf-8
End:
